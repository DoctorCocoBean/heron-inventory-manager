<!doctype html>
<html lang=""en>
    <head>
        <meta charset="utf-8">
        <meta name=""viewport" content="width=device-width, initial-scale=1">
        <title>Inventory App</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
        <link rel="stylesheet" href="/stylesheets/InventoryStyle.css">

    </head>
    <style>
        .scrollable {
            height: 80vh;
            overflow:scroll;
            overflow-x: hidden;
        }
    </style>
    <body>

    <!-- Modal -->
    <div class="modal" id="editItemModal" role="dialog">
        <div class="modal-dialog">
        </div>
    </div>

    <div class="container-fluid min-vh-100 flex-grow-1 d-flex flex-column flex-sm-row overflow-auto">
        <div class="row flex-fill">

            <!-- Side bar -->
            <%- include('sideBar'); %>
        
            <!-- content -->
            <main class="col overflow-auto min-vh-100 p-0">
                <div class="bg-light rounded-3 p-3" style="height: 300px">

                    <div class="d-flex justify-content-between">

                    <div class="">
                        <h3 style="opacity: 20%;">Inventory</h3>
                    </div>

                    <div class="m-1">
                        <button onclick="openNewItemDialog()" class="btn btn-primary inventoryBtn" >Add Item</button>
                        <button class="btn btn-primary inventoryBtn" id="readCVSButton" onclick="showUploadDialog()">Upload</button>
                        <button class="btn btn-primary inventoryBtn" id="deleteAllButton" onclick="deleteAllItems()">Delete All</button>
                    </div>
                    </div>

                    <hr style="opacity: 10%;">

                    <div class="m-1">
                        <input type="text" placeholder="search" id="searchBar" class="searchBar" style="width: 300px"></input>
                    </div>

                    <div class="d-flex flow-row my-2 py-2">
                        <div class="">Items: <b class="enhancedText"><%= metaData.numOfItems %></b></div>
                        <div class="px-5">Total Quantity: <b class="enhancedText"><%= metaData.totalQuantity %></b></div>
                        <div class="px-5">Total Value: <b class="enhancedText">$<%= metaData.totalValue %></b></div>
                    </div>

                    <div class="scrollable" >
                        <table class="table table-hover itemsTable" style=""; id="itemTable">
                            <thead>
                                <td>Name</td>
                                <td>Quantity</td>
                                <td>Minimum Level</td>
                                <td>Price</td>
                            </thead>
                            <% for(var i=0; i<items.length; i++) { %>
                            <tr id="tableRow_<%= items[i].id %>" onclick="gotoUpdateItem(<%= items[i].id %>)" >
                                <td ><%= items[i].name %></td>
                                <td ><%= items[i].quantity %></td>
                                <td ><%= items[i].minimumLevel %></td>
                                <td ><%= items[i].price %></td>
                            </tr>
                            <% } %>
                        </table>
                    </div>

                </div>
            </main>
        </div>
    </div>

        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    </body>

    <script>
        var isEditingRow = false;
        var searchBar   = document.getElementById("searchBar");
        const itemTable = document.getElementById("itemTable");
        const popup     = document.getElementById("editItemModal");

        // Keyboard events
        searchBar.addEventListener("keypress", function(event) {
            if (event.key == "Enter") {
                event.preventDefault();
                searchForItem(searchBar.value)
            }
        });

        $(document).keyup(function(e) 
        {
            if (e.key === "Escape") { // escape key maps to keycode `27`
                $('#editItemModal').modal('hide');
            }

            if (e.key === "/") {
                searchBar.focus();
            }
        });

        async function openNewItemDialog()
        {
            console.log('New item dialog');

            $('#editItemModal').modal()

            popup.innerHTML = `
                <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                    <h4 class="modal-title">Edit Item</h4>
                    </div>
                    <div class="modal-body">

                        <div class="container">
                        <div class="row">
                            <div class="col-md p-3" style="line-height: 1.8">
                            Name: <br>
                            Quantity: <br>
                            Minimum Level: <br>
                            Price: <br>
                            Value: <br>
                            Barcode: <br>
                            </div>
                            <div class="col-sm">
                                <input type="text" id="nameInput" ></input> <br>
                                <input type="text" id="quantityInput"  ></input> <br>
                                <input type="text" id="minQuantityInput" ></input> <br>
                                <input type="text" id="priceInput" ></input> <br>
                                <input type="text" id="valueInput" ></input> <br>
                                <input type="text" id="barcodeInput" ></input> <br>
                                <input type="text" id="notesInput" ></input> <br>
                                <input type="text" id="tagsInput" ></input> <br>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-default" onclick="addItem()">Save</button>

                    </div>
                </div>
                
                </div>
            `
        }

        async function gotoUpdateItem(itemId)
        { 
            if (isEditingRow) {
                return;
            }

            console.log('goto item', itemId)
            itemId = itemId;

            const request = new Request(`/getItemById/${itemId}`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => 
            {
                console.log('data: ', data);

                if (data.length <= 0) {
                    console.log('Error. data is empty');
                    return;
                }

                $('#editItemModal').modal()

                popup.innerHTML = `
                    <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                        <h4 class="modal-title">Edit Item</h4>
                        </div>
                        <div class="modal-body">

                            <div class="container">
                            <div class="row">
                                <div class="col-md p-3" style="line-height: 1.8">
                                Name: <br>
                                Quantity: <br>
                                Minimum Level: <br>
                                Price: <br>
                                Value: <br>
                                Barcode: <br>
                                Notes: <br>
                                Tags: <br>
                                </div>
                                <div class="col-sm">
                                <input type="text" id="nameInput" value="${data[0]['name']}"></input> <br>
                                <input type="text" id="quantityInput" value="${data[0]['quantity']}" ></input> <br>
                                <input type="text" id="minQuantityInput" value="${data[0]['minimumLevel']}"></input> <br>
                                <input type="text" id="priceInput" value="${data[0]['price']}"></input> <br>
                                <input type="text" id="valueInput" value="${data[0]['value']}"></input> <br>
                                <input type="text" id="barcodeInput" value="${data[0]['barcode']}"></input> <br>
                                <input type="text" id="notesInput" value="${data[0]['notes']}"></input> <br>
                                <input type="text" id="tagsInput" value="${data[0]['tags']}"></input> <br>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                            <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal" onclick="deleteItem(${data[0]['id']})">Delete</button>
                            <button type="button" class="btn btn-default" onclick="updateItem(${data[0]['id']})">Save</button>
                            </div>
                        </div>
                    </div>
                    
                    </div>
                `
            });
        }

        async function searchForItem(name) 
        {
            if (name == "") {
                name = "all";
            }

            const request = new Request(`/search/${name}`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => {
                console.log(data);

                var tableHTML = `
                    <thead>
                        <td>Name</td>
                        <td>Quantity</td>
                        <td>Minimum Level</td>
                        <td>Price</td>
                    </thead>
                `

                for (i=0; i<data.length; i++) 
                {
                    tableHTML += createTableRowHTML(data[i]['id'], data[i]['name'], data[i]['quantity'],
                                                    data[i]['minimumLevel'], data[i]['price'], data[i]['value']);
                }

                itemTable.innerHTML= tableHTML;
            });
        }

        async function readFileAsText(file) 
        {
            return new Promise((resolve, reject) => 
            {
                const reader = new FileReader();
                reader.onload = (event) => {
                    resolve(event.target.result);
                };

                reader.onerror = (event) => {
                    console.log("error");
                    reject(event.target.result);
                }

                reader.readAsText(file);
            })
        }

        async function showUploadDialog()
        {
            console.log("test");
            $('#editItemModal').modal()

            popup.innerHTML = `
                <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                    <h4 class="modal-title">Edit Item</h4>
                    </div>
                    <div class="modal-body">

                        <div class="container">
                        <div class="row">
                            <div class="col-md p-3" style="line-height: 1.8">
                            <input type="file" id="csvFileInput" accept=".csv">
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                        <div class="">
                            <button type="button" class="btn btn-default" onclick="uploadCSV()">Upload</button>
                        </div>
                    </div>
                </div>
                
                </div>
            `
        }

        async function uploadCSV()
        {
            const csvFileInput = document.getElementById('csvFileInput');
            const file = csvFileInput.files[0];

            if (!file) { return; }

            try {
                const fileData = await readFileAsText(file);

                const request = new Request("/uploadCSV", {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        csvData: fileData
                    }),
                })

                const response = await fetch(request);
            } catch (error) {
                console.log("error reading file: ", error);
            }

            $('#editItemModal').modal('hide');
            loadItemTable();
        }

        async function addItem()
        {
            const itemName          = document.getElementById('nameInput').value;
            const itemQuantity      = document.getElementById('quantityInput').value;
            const itemMinQuantity   = document.getElementById('minQuantityInput').value;
            const itemPrice         = document.getElementById('priceInput').value;
            const itemValue         = document.getElementById('valueInput').value;
            const itemBarcode       = document.getElementById('barcodeInput').value;
            const itemNotes         = document.getElementById('notesInput').value;
            const itemTags          = document.getElementById('tagsInput').value;

            console.log(itemName);

            const request = new Request(`/addItem`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: itemName,
                    itemQuantity: itemQuantity ,
                    itemMinQuantity: itemMinQuantity,
                    itemPrice: itemPrice,
                    itemValue: itemValue,
                    itemBarcode: itemBarcode,
                    itemNotes: itemNotes,
                    itemTags: itemTags,
                }),
            })

            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');
        }

        async function deleteItem(itemId)
        {
            const request = new Request(`/deleteItem`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemId: itemId,
                }),
            })

            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');
            loadItemTable();
        }

        async function updateItem(itemId) 
        {
            const itemName          = document.getElementById('nameInput').value;
            const itemQuantity      = document.getElementById('quantityInput').value;
            const itemMinQuantity   = document.getElementById('minQuantityInput').value;
            const itemPrice         = document.getElementById('priceInput').value;
            const itemValue         = document.getElementById('valueInput').value;
            const itemBarcode       = document.getElementById('barcodeInput').value;
            const itemNotes         = document.getElementById('notesInput').value;
            const itemTags          = document.getElementById('tagsInput').value;

            const request = new Request(`/edit/${itemId}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: itemName,
                    itemQuantity: itemQuantity ,
                    itemMinQuantity: itemMinQuantity,
                    itemPrice: itemPrice,
                    itemValue: itemValue,
                    itemBarcode: itemBarcode,
                    itemNotes: itemNotes,
                    itemTags: itemTags,
                }),
            })
            
            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');

            const tableRow = document.getElementById(`tableRow_${itemId}`);
            console.log(tableRow);
            tableRow.innerHTML = `
                <td>${itemName}</td>
                <td>${itemQuantity}</td>
                <td>${itemMinQuantity}</td>
                <td>${itemPrice}</td>
            `
        }

        async function loadItemTable()
        {
            const request = new Request(`/search/all`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => 
            {
                var tableHTML = `
                    <thead>
                        <td style="opacity: 50%;">Name</td>
                        <td style="opacity: 50%; text-align: center;">Quantity</td>
                        <td style="opacity: 50%;">Minimum Level</td>
                        <td style="opacity: 50%;">Price</td>
                        <td style="opacity: 50%;">Value</td>
                    </thead>
                `

                for (i=0; i<data.length; i++) 
                {
                    tableHTML += createTableRowHTML(data[i]['id'], data[i]['name'], data[i]['quantity'],
                                                    data[i]['minimumLevel'], data[i]['price'], data[i]['value']);
                }

                itemTable.innerHTML= tableHTML;
            });
        }

        function createTableRowHTML(itemId, name, quantity, minimumLevel, price, value)
        {
            const html = `
                    <tr id="tableRow_${itemId}" onmouseover="showQualityAdjustmentButtons(${itemId})" onmouseleave="hideQualityAdjustmentButtons(${itemId})" onclick="gotoUpdateItem(${itemId})" >
                        <td class="nameRow">${name}</td>
                        <td style="text-align: center;">
                            <div class="container">

                            <div style="background-color: transparent; display: inline-block; width: 30px; height: 30px;">
                            <button style="display: none; width: 30px; height: 30px; padding: 0px;" class="btn btn-primary inventoryBtn" onclick="decrementQuantity(${itemId})">-</button>
                            </div>

                            <div class="quantityRow" style="display: inline" onclick="startEditingQuantity(${itemId})">
                            ${quantity}
                            </div>

                            <div style="background-color: transparent; display: inline-block; width: 30px; height: 30px;">
                            <button style="display: none; width: 30px; height: 30px; padding: 0px" class="btn btn-primary inventoryBtn" onclick="incrementQuantity(${itemId})">+</button>
                            </div>

                            <div>
                        </td>
                        <td class="minimumLevelRow">${minimumLevel}</td>
                        <td class="priceRow">${price}</td>
                        <td class="valueRow">$${value}</td>
                    </tr>
            `

            return html;
        }

        async function incrementQuantity(itemId)
        {
            event.stopPropagation();

            const item         = await getItemById(itemId);
            const tableRow     = document.getElementById(`tableRow_${itemId}`);
            const quantity     = Number(item[0]['quantity']);
            var newQuantity    = quantity + 1;

            tableRow.getElementsByClassName("quantityRow")[0].innerHTML = newQuantity;
            tableRow.getElementsByClassName("valueRow")[0].innerHTML    = "$" + String(item[0]['value']);

            const request = new Request(`/edit/${itemId}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: item[0]['name'],
                    itemQuantity: newQuantity,
                    itemMinQuantity: item[0]['minimumLevel'],
                    itemPrice: item[0]['price'],
                    itemValue: item[0]['value'],
                    itemBarcode: item[0]['barcode'],
                    itemNotes: item[0]['notes'],
                    itemTags: item[0]['tags'],
                }),
            })
            
            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }
        }

        async function decrementQuantity(itemId)
        {
            event.stopPropagation();

            const item      = await getItemById(itemId);
            const tableRow  = document.getElementById(`tableRow_${itemId}`);
            const quantity  = Number(item[0]['quantity']);

            console.log(quantity);

            var newQuantity = quantity - 1;
            if (newQuantity < 0) {
                newQuantity = 0;
            }

            tableRow.getElementsByClassName("quantityRow")[0].innerHTML = newQuantity;
            tableRow.getElementsByClassName("valueRow")[0].innerHTML    = "$" + String(item[0]['value']);

            const request = new Request(`/edit/${itemId}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: item[0]['name'],
                    itemQuantity: newQuantity,
                    itemMinQuantity: item[0]['minimumLevel'],
                    itemPrice: item[0]['price'],
                    itemValue: item[0]['value'],
                    itemBarcode: item[0]['barcode'],
                    itemNotes: item[0]['notes'],
                    itemTags: item[0]['tags'],
                }),
            })
            
            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }
        }

        function showQualityAdjustmentButtons(itemId)
        {
            const tableRow = document.getElementById(`tableRow_${itemId}`);
            const buttons = tableRow.getElementsByTagName('button');
            
            for (i=0; i<buttons.length; i++) {
                buttons[i].style.display = 'inline-block';
            }
        }

        function hideQualityAdjustmentButtons(itemId) 
        {
            const tableRow = document.getElementById(`tableRow_${itemId}`);
            const buttons = tableRow.getElementsByTagName('button');
            
            for (i=0; i<buttons.length; i++) {
                buttons[i].style.display = 'none';
            }
        }

        async function deleteAllItems()
        {
            const request = new Request(`/deleteAllItems`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ }),
            })

            const response = await fetch(request).then(() => {
                loadItemTable();
            });
        }

        async function getItemById(itemId)
        {
            const request = new Request(`/getItemById/${itemId}`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = await response.json().then((data) => 
            {
                return data;
            });

            return data;
        }

        async function startEditingQuantity(itemId)
        {
            console.log('start editing quality');
            event.stopPropagation();
            changeRowStateToEditQuantity(itemId);
        }

        async function changeRowStateToDefaultView(itemId)
        {
            isEditingRow = false;

            const item   = await getItemById(itemId);
            const name         = item[0]['name'];
            const quantity     = item[0]['quantity'];
            const minimumLevel = item[0]['minimumLevel'];
            const price        = item[0]['price'];
            const value        = item[0]['value'];

            const tableRow     = document.getElementById(`tableRow_${itemId}`);
            tableRow.innerHTML = createTableRowHTML(itemId, name, quantity, minimumLevel, price, value);
        }

        async function changeRowStateToEditQuantity(itemId)
        {
            isEditingRow = true;
            const item   = await getItemById(itemId);

            const tableRow     = document.getElementById(`tableRow_${itemId}`);
            const name         = item[0]['name'];
            const quantity     = item[0]['quantity'];
            const minimumLevel = item[0]['minimumLevel'];
            const price        = item[0]['price'];
            const value        = item[0]['value'];

            tableRow.innerHTML = `
                <td class="nameRow">${name}</td>
                <td style="text-align: center;">
                    <input type="text" class="quantityRow" id="tempInput" value="${quantity}" size="3" onblur="onRowLoseFocus(${itemId})" style="text-align: center;"></input>
                </td>
                <td class="minimumLevelRow">${minimumLevel}</td>
                <td class="priceRow">${price}</td>
                <td class="valueRow">${value}</td>
            `

            const quantityInput = document.getElementById('tempInput');
            quantityInput.addEventListener('keydown', function(event) 
            {
                if (event.key == 'Enter') {
                    console.log('enter key');
                    onRowLoseFocus(itemId);
                    event.preventDefault();
                }

                if (event.key == "Escape") {
                    console.log('escape key');
                    changeRowStateToDefaultView(itemId);
                    event.preventDefault();
                }
            });

            const textInput = document.getElementById("tempInput");
            textInput.focus();
            textInput.select();
        }

        async function onRowLoseFocus(itemId)
        {
            if (isEditingRow == false)
                return;

            const item         = await getItemById(itemId);
            const tableRow     = document.getElementById(`tableRow_${itemId}`);
            const name         = tableRow.getElementsByClassName("nameRow")[0].innerHTML;
            const quantity     = document.getElementById('tempInput').value;
            const minimumLevel = tableRow.getElementsByClassName("minimumLevelRow")[0].innerHTML;
            const price        = tableRow.getElementsByClassName("priceRow")[0].innerHTML;
            const value        = tableRow.getElementsByClassName("valueRow")[0].innerHTML;

            const request = new Request(`/edit/${itemId}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: name,
                    itemQuantity: quantity,
                    itemMinQuantity: minimumLevel,
                    itemPrice: price,
                    itemValue: value,
                    itemBarcode: item[0].barcode,
                    itemNotes: item[0].notes,
                    itemTags: item[0].tags,
                }),
            })
            
            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            changeRowStateToDefaultView(itemId);
        }

        loadItemTable();

    </script>
</html>