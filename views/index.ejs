<!doctype html>
<html lang=""en>
    <head>
        <meta charset="utf-8">
        <meta name=""viewport" content="width=device-width, initial-scale=1">
        <title>Inventory App</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">

    </head>
    <style>
        .scrollable {
            height: 90vh;
            overflow:scroll;
        }
    </style>
    <body>

    <!-- Modal -->
    <div class="modal" id="editItemModal" role="dialog">
        <div class="modal-dialog">
        
        </div>
    </div>

    <div class="container-fluid min-vh-100 pb-3 flex-grow-1 d-flex flex-column flex-sm-row overflow-auto">
        <div class="row flex-fill">

            <!-- Side bar -->
            <aside class="d-flex flex-column flex-shrink-0 p-3 bg-light" style="width: 280px;">
                <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none">
                <svg class="bi me-2" width="40" height="32"><use xlink:href="#bootstrap"></use></svg>
                <span class="fs-4">Sidebar</span>
                </a>
                <hr>
                <ul class="nav nav-pills flex-column mb-auto">
                <li class="nav-item">
                    <a href="#" class="nav-link active" aria-current="page">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#home"></use></svg>
                    Home
                    </a>
                </li>
                <li>
                    <a href="#" class="nav-link link-dark">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#speedometer2"></use></svg>
                    Dashboard
                    </a>
                </li>
                </ul>
                <hr>
            </aside>
        
            <!-- content -->
            <main class="col overflow-auto min-vh-100">
                <div class="bg-light min-vh-100 rounded-3 p-3">

                    <div class="d-flex justify-content-between">
                    <div class="">
                        <h3>Items</h3>
                    </div>
                    <div class="m-1">
                        <button onclick="openNewItemDialog()" class="btn btn-primary">Add Item</button>
                        <button class="btn btn-primary" id="readCVSButton" onclick="showUploadDialog()">Upload</button>
                        <button class="btn btn-primary" id="deleteAllButton" onclick="deleteAllItems()">Delete All</button>
                    </div>
                    </div>

                    <hr>

                    <div class="m-1">
                        <input type="text" placeholder="search" id="searchBar" style="width: 300px"></input>
                    </div>

                    <div class="d-flex flow-row my-2 py-2">
                        <div class="">Items: <%= metaData.totalQuantity %></div>
                        <div class="px-5">Total Quantity: <%= metaData.totalQuantity %></div>
                        <div class="px-5">Total Value: $<%= metaData.totalValue %></div>

                    </div>

                    <div class="scrollable" >
                        <table class="table table-hover" id="itemTable">
                            <thead>
                                <td>Name</td>
                                <td>Quantity</td>
                                <td>Minimum Level</td>
                                <td>Price</td>
                            </thead>
                            <% for(var i=0; i<items.length; i++) { %>
                            <tr id="tableRow_<%= items[i].id %>" onclick="gotoUpdateItem(<%= items[i].id %>)" >
                                <td ><%= items[i].name %></td>
                                <td ><%= items[i].quantity %></td>
                                <td ><%= items[i].minimumLevel %></td>
                                <td ><%= items[i].price %></td>
                            </tr>
                            <% } %>
                        </table>
                    </div>

                </div>
            </main>
        </div>
    </div>

         
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    </body>

    <script>
        var searchBar = document.getElementById("searchBar");
        const itemTable = document.getElementById("itemTable");
        const popup = document.getElementById("editItemModal");

        searchBar.addEventListener("keypress", function(event) {
            if (event.key == "Enter") {
                event.preventDefault();
                searchForItem(searchBar.value)
            }
        });

        $(document).keyup(function(e) 
        {
            if (e.key === "Escape") { // escape key maps to keycode `27`
                $('#editItemModal').modal('hide');
            }

            if (e.key === "/") {
                searchBar.focus();
            }
        });

        async function openNewItemDialog()
        {
            console.log('New item dialog');

            $('#editItemModal').modal()

            popup.innerHTML = `
                <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                    <h4 class="modal-title">Edit Item</h4>
                    </div>
                    <div class="modal-body">

                        <div class="container">
                        <div class="row">
                            <div class="col-md p-3" style="line-height: 1.8">
                            Name: <br>
                            Quantity: <br>
                            Minimum Level: <br>
                            Price: <br>
                            Value: <br>
                            Barcode: <br>
                            </div>
                            <div class="col-sm">
                                <input type="text" id="nameInput" ></input> <br>
                                <input type="text" id="quantityInput"  ></input> <br>
                                <input type="text" id="minQuantityInput" ></input> <br>
                                <input type="text" id="priceInput" ></input> <br>
                                <input type="text" id="valueInput" ></input> <br>
                                <input type="text" id="barcodeInput" ></input> <br>
                                <input type="text" id="notesInput" ></input> <br>
                                <input type="text" id="tagsInput" ></input> <br>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-default" onclick="addItem()">Save</button>

                    </div>
                </div>
                
                </div>
            `

        }

        async function gotoUpdateItem(itemIndex)
        { 
            console.log('goto item', itemIndex)
            itemIndex = itemIndex;

            const request = new Request(`/itemByIndex/${itemIndex}`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => 
            {
                console.log('data: ', data);

                if (data.length <= 0) {
                    console.log('Error. data is empty');
                    return;
                }

                $('#editItemModal').modal()

                popup.innerHTML = `
                    <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                        <h4 class="modal-title">Edit Item</h4>
                        </div>
                        <div class="modal-body">

                            <div class="container">
                            <div class="row">
                                <div class="col-md p-3" style="line-height: 1.8">
                                Name: <br>
                                Quantity: <br>
                                Minimum Level: <br>
                                Price: <br>
                                Value: <br>
                                Barcode: <br>
                                Notes: <br>
                                Tags: <br>
                                </div>
                                <div class="col-sm">
                                <input type="text" id="nameInput" value="${data[0]['name']}"></input> <br>
                                <input type="text" id="quantityInput" value="${data[0]['quantity']}" ></input> <br>
                                <input type="text" id="minQuantityInput" value="${data[0]['minimumLevel']}"></input> <br>
                                <input type="text" id="priceInput" value="${data[0]['price']}"></input> <br>
                                <input type="text" id="valueInput" value="${data[0]['value']}"></input> <br>
                                <input type="text" id="barcodeInput" value="${data[0]['barcode']}"></input> <br>
                                <input type="text" id="notesInput" value="${data[0]['notes']}"></input> <br>
                                <input type="text" id="tagsInput" value="${data[0]['tags']}"></input> <br>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                            <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal" onclick="deleteItem(${data[0]['id']})">Delete</button>
                            <button type="button" class="btn btn-default" onclick="updateItem(${data[0]['id']})">Save</button>
                            </div>
                        </div>
                    </div>
                    
                    </div>
                `
            });
        }

        async function searchForItem(name) 
        {
            if (name == "") {
                name = "all";
            }

            const request = new Request(`/search/${name}`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => {
                console.log(data);

                var tableHTML = `
                    <thead>
                        <td>Name</td>
                        <td>Quantity</td>
                        <td>Minimum Level</td>
                        <td>Price</td>
                    </thead>
                `

                for (i=0; i<data.length; i++) 
                {
                    tableHTML += `
                        <tr id="tableRow_${data[i]['id']}" onclick="gotoUpdateItem(${data[i]['id']})" >
                        <tr onclick="gotoUpdateItem(${data[i]['id']})">
                            <td >${data[i]['name']}</td>
                            <td >${data[i]['quantity']}</td>
                            <td >${data[i]['minimumLevel']}</td>
                            <td >${data[i]['price']}</td>
                        </tr>
                    `
                }

                itemTable.innerHTML= tableHTML;
            });
        }

        async function readFileAsText(file) 
        {
            return new Promise((resolve, reject) => 
            {
                const reader = new FileReader();
                reader.onload = (event) => {
                    resolve(event.target.result);
                };

                reader.onerror = (event) => {
                    console.log("error");
                    reject(event.target.result);
                }

                reader.readAsText(file);
            })
        }

        async function showUploadDialog()
        {
            console.log("test");
            $('#editItemModal').modal()

            popup.innerHTML = `
                <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                    <h4 class="modal-title">Edit Item</h4>
                    </div>
                    <div class="modal-body">

                        <div class="container">
                        <div class="row">
                            <div class="col-md p-3" style="line-height: 1.8">
                            <input type="file" id="csvFileInput" accept=".csv">
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                        <div class="">
                            <button type="button" class="btn btn-default" onclick="uploadCSV()">Upload</button>
                        </div>
                    </div>
                </div>
                
                </div>
            `
        }

        async function uploadCSV()
        {
            const csvFileInput = document.getElementById('csvFileInput');
            const file = csvFileInput.files[0];

            if (!file) { return; }

            try {
                const fileData = await readFileAsText(file);

                const request = new Request("/uploadCSV", {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        csvData: fileData
                    }),
                })

                const response = await fetch(request);
            } catch (error) {
                console.log("error reading file: ", error);
            }

            $('#editItemModal').modal('hide');
            loadItemTable();
        }

        async function addItem()
        {
            const itemName          = document.getElementById('nameInput').value;
            const itemQuantity      = document.getElementById('quantityInput').value;
            const itemMinQuantity   = document.getElementById('minQuantityInput').value;
            const itemPrice         = document.getElementById('priceInput').value;
            const itemValue         = document.getElementById('valueInput').value;
            const itemBarcode       = document.getElementById('barcodeInput').value;
            const itemNotes         = document.getElementById('notesInput').value;
            const itemTags          = document.getElementById('tagsInput').value;

            console.log(itemName);

            const request = new Request(`/addItem`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: itemName,
                    itemQuantity: itemQuantity ,
                    itemMinQuantity: itemMinQuantity,
                    itemPrice: itemPrice,
                    itemValue: itemValue,
                    itemBarcode: itemBarcode,
                    itemNotes: itemNotes,
                    itemTags: itemTags,
                }),
            })

            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');
        }

        async function deleteItem(itemId)
        {
            const request = new Request(`/deleteItem`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemId: itemId,
                }),
            })

            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');
            loadItemTable();
        }

        async function updateItem(itemId) 
        {
            const itemName          = document.getElementById('nameInput').value;
            const itemQuantity      = document.getElementById('quantityInput').value;
            const itemMinQuantity   = document.getElementById('minQuantityInput').value;
            const itemPrice         = document.getElementById('priceInput').value;
            const itemValue         = document.getElementById('valueInput').value;
            const itemBarcode       = document.getElementById('barcodeInput').value;
            const itemNotes         = document.getElementById('notesInput').value;
            const itemTags          = document.getElementById('tagsInput').value;

            const request = new Request(`/edit/${itemId}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    itemName: itemName,
                    itemQuantity: itemQuantity ,
                    itemMinQuantity: itemMinQuantity,
                    itemPrice: itemPrice,
                    itemValue: itemValue,
                    itemBarcode: itemBarcode,
                    itemNotes: itemNotes,
                    itemTags: itemTags,
                }),
            })
            
            const response = await fetch(request);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`HTTP Error: Status ${response.status}, Message: ${errorData.message || 'Unknow err'}`);
            }

            $('#editItemModal').modal('hide');

            const tableRow = document.getElementById(`tableRow_${itemId}`);
            console.log(tableRow);
            tableRow.innerHTML = `
                <td>${itemName}</td>
                <td>${itemQuantity}</td>
                <td>${itemMinQuantity}</td>
                <td>${itemPrice}</td>
            `
        }

        async function loadItemTable()
        {
            console.log('loading item talble');

            const request = new Request(`/search/all`, {
                method: "GET",
                headers: { 'Content-Type': 'application/json' }
            })

            const response = await fetch(request);
            const data = response.json().then((data) => 
            {
                var tableHTML = `
                    <thead>
                        <td>Name</td>
                        <td>Quantity</td>
                        <td>Minimum Level</td>
                        <td>Price</td>
                    </thead>
                `

                for (i=0; i<data.length; i++) 
                {
                    tableHTML += `
                        <tr id="tableRow_${data[i]['id']}" onclick="gotoUpdateItem(${data[i]['id']})" >
                            <td >${data[i]['name']}</td>
                            <td >${data[i]['quantity']}</td>
                            <td >${data[i]['minimumLevel']}</td>
                            <td >${data[i]['price']}</td>
                        </tr>
                    `
                }

                itemTable.innerHTML= tableHTML;
            });
        }

        async function deleteAllItems()
        {
            const request = new Request(`/deleteAllItems`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ }),
            })

            const response = await fetch(request).then(() => {
                loadItemTable();
            });
        }
    </script>
</html>